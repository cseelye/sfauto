#!/bin/bash
set -euo pipefail

# Additional options to the docker run command - https://docs.docker.com/engine/reference/commandline/run/
SFAUTO_CONTAINER_RUN_OPTIONS=${SFAUTO_CONTAINER_RUN_OPTIONS:-}

# The base docker image to use for shells
SFAUTO_IMAGE_NAME=${SFAUTO_IMAGE_NAME:-sfauto}

# The name to give to shell container instances
SFAUTO_CONTAINER_NAME=${SFAUTO_CONTAINER_NAME:-sfauto-shell-}

# Path to an explicit docker binary. Leave blank to auto-discover
DOCKER_BINARY=${DOCKER_BINARY:-}



# Parse command line options
usage()
{
    echo "$(basename $0) [OPTIONS]"
    echo "  -n    Never rebuild the container, always use the existing image"
    echo "  -d    Turn on set -x for debugging"
}

NEVER_REBUILD=0
while getopts ":hnd" opt; do
    case ${opt} in
        n)
            NEVER_REBUILD=1 ;;
        d)
            set -x ;;
        h)
            usage; exit 0;
    esac
done
shift $((OPTIND - 1))

echo ${PATH} | grep -q /usr/local/bin || export PATH=/usr/local/bin:"${PATH}"

# Make sure we are not inside a container already
[[ -e /proc/1 ]] && grep -q 'cpu:/docker/' /proc/1/cgroup && { echo "Cannot start a container inside another container"; exit 1; }

# Find the docker binary
if [[ -z ${DOCKER_BINARY} ]]; then
    for possible in "$(which docker 2>/dev/null || true)" /usr/local/bin/docker /usr/bin/docker "$(which podman 2>/dev/null || true)" /usr/bin/podman; do
        if [[ -e "${possible}" ]]; then
            DOCKER_BINARY="${possible}"
            break
        fi
    done
fi
if [[ -z ${DOCKER_BINARY} ]]; then
    echo "Could not find a docker binary"
    exit 1
fi

SFAUTO_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "${SFAUTO_DIR}"

if "${DOCKER_BINARY}" image ls --format '{{.Repository}}:{{.Tag}}' | grep -q ${SFAUTO_IMAGE_NAME}; then
    image_exists=1
else
    image_exists=0
fi

if [[ ${image_exists} -eq 0 && ${NEVER_REBUILD} -eq 1 ]]; then
    echo "${SFAUTO_IMAGE_NAME} image does not exist and must be built"
    exit 1
fi

# Check if the sandbox is clean
local_changes=0
if ! git diff --exit-code &>/dev/null; then
    local_changes=1
fi

image_version=$(${DOCKER_BINARY} image inspect ${SFAUTO_IMAGE_NAME} 2>/dev/null | jq --raw-output '.[0].Config.Labels | .["org.opencontainers.image.version"]' || echo "")
image_rev=$(${DOCKER_BINARY} image inspect ${SFAUTO_IMAGE_NAME} 2>/dev/null | jq --raw-output '.[0].Config.Labels | .["org.opencontainers.image.revision"]' || echo "")
image_date=$(${DOCKER_BINARY} image inspect ${SFAUTO_IMAGE_NAME} 2>/dev/null | jq --raw-output '.[0].Config.Labels | .["org.opencontainers.image.created"]' || echo "")

repo_image_version="$(cat .container-version || echo '0.0')"
repo_image_rev="$(git log -n 1 --pretty=format:%H -- Dockerfile 2>/dev/null || echo 'unknown')"

if [[ ${NEVER_REBUILD} -eq 0 ]]; then
    # See if the image needs rebuilding
    rebuild=0

    # If the image deos not exist locally, build it
    if [[ ${image_exists} -ne 1 ]]; then
        rebuild=1
    elif [[ ${image_version} != "0.0" && ( ${image_rev} != ${repo_image_rev} || ${image_version} != ${repo_image_version} ) ]]; then
        # Compare the changeset/version of the container image to the Dockerfile in the current repo
        # If the version is 0.0, it was a local build and we don't want to overwrite it
        # If the version is not 0.0, and the rev or version in the repo is newer, rebuild the image

        # echo "     image_version='${image_version}'"
        # echo "repo_image_version='${repo_image_version}'"
        # echo "     image_rev='${image_rev}'"
        # echo "repo_image_rev='${repo_image_rev}'"

        rebuild=1
    fi

    # Build the container
    if [[ ${rebuild} -eq 1 ]]; then
        ./container-build
        image_version=$(${DOCKER_BINARY} image inspect ${SFAUTO_IMAGE_NAME} 2>/dev/null | jq --raw-output '.[0].Config.Labels | .["org.opencontainers.image.version"]' || echo "")
        image_rev=$(${DOCKER_BINARY} image inspect ${SFAUTO_IMAGE_NAME} 2>/dev/null | jq --raw-output '.[0].Config.Labels | .["org.opencontainers.image.revision"]' || echo "")
        image_date=$(${DOCKER_BINARY} image inspect ${SFAUTO_IMAGE_NAME} 2>/dev/null | jq --raw-output '.[0].Config.Labels | .["org.opencontainers.image.created"]' || echo "")
    fi
fi


# Save the SF* variables into a file to import them into the container
envfile=$(mktemp -t docker-env.XXXX)
env | grep "^SF" | sort > ${envfile} || true

# Find any other existing containers to give this one a unique name
index=$("${DOCKER_BINARY}" container ls --all --format '{{.Names}}' | grep ${SFAUTO_CONTAINER_NAME} | cut -d- -f3 | sort | tail -n1 || echo 0)
(( index++ )) || true

# If the user did not supply a command to run, start the container with an interactive shell
if [[ $# -le 0 ]]; then
    echo
    echo "===================================================="
    echo "     Entering SFAUTO container"
    echo "Version ${image_version}-${image_rev}"
    echo "        ${image_date}"
    if [[ ${image_version} == "0.0" ]]; then
        echo
        echo "   * * * Running custom image * * *"
        echo
        echo "To return to standard image, exit this container, use container-delete and re-run"
    fi
    echo "===================================================="
    echo

    cmd="/bin/bash"

# If the user specified a command, run that command in the container
else
    cmd="$*"
fi

# Start the container.  To make it as seamless as possible:
#   Run in privileged mode so the user has max power
#   Export DOCKER_HOST_USER, DOCKER_HOST_NAME and DOCKER_HOST_IP so that the container knows a little bit about its parent
#   Use the SF* env variables from the current environment in the container
#   Mount this script's directory (assumed to be the sfauto repo directory) into the container
#   Mount the current user's dotfiles into the container so they get the same environment

exec "${DOCKER_BINARY}" container run \
  --interactive \
  --tty \
  --privileged \
  --rm \
  --env-file ${envfile} \
  --volume ${SFAUTO_DIR}:/sfauto \
  --workdir /sfauto \
  --hostname ${SFAUTO_CONTAINER_NAME}${index} \
  --name ${SFAUTO_CONTAINER_NAME}${index} \
  ${SFAUTO_CONTAINER_RUN_OPTIONS} \
  ${SFAUTO_IMAGE_NAME} \
  ${cmd}
